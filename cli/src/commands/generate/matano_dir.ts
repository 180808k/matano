import * as fs from "fs";
import { Command, Flags } from "@oclif/core";
import { prompt } from "enquirer";
import execa from "execa";
import ora from "ora";

const autogenerateNote = `This file was auto-generated by matano generate.`;
const sampleDetectionPy = `# ${autogenerateNote}

def detect(record):
    return True

`;

const sampleDetectionToml = `# ${autogenerateNote}

name = "my_source"

[schema]
fields = [
    { name = "id", type = "long" },
    { name = "name", type = "string" },
    { name = "category", type = "string" },
    { name = "description", type = "string" },
    { name = "product", type = "string" },
]
`;

const sampleDetectionReqs = `# ${autogenerateNote}
`;

export default class GenerateMatanoDir extends Command {
  static description = "Generates a sample Matano directory to get started.";

  static examples = [`matano generate:matano-dir`, ];


  async run(): Promise<void> {
    const { args, flags } = await this.parse(GenerateMatanoDir);

    fs.mkdirSync("matano/detections/my_detection", { recursive: true });
    fs.mkdirSync("matano/log_sources/my_log_source", { recursive: true });
    fs.writeFileSync("matano/detections/my_detection/detect.py", sampleDetectionPy);
    fs.writeFileSync("matano/detections/my_detection/detection.toml", sampleDetectionToml);
    fs.writeFileSync("matano/detections/my_detection/requirements.txt", sampleDetectionReqs);
    fs.writeFileSync("matano/log_sources/my_log_source/log_source.toml", sampleDetectionToml);

  }
}
